[
 {
  "file": "/Users/naoyashiga/Desktop/code/iOS/myProduct/BlogReader/BlogReader/WebViewController.swift",
  "offset": 995,
  "remove": 16170,
  "text": "(screenHeight)\n        screenWidth = self.view.bounds.width\n        initBackButton()\n        setShareButton()\n        initWebView()\n        initProgressBar()\n        \n        initMenuViewAndButton()\n        \n        //広告表示\n        settingAd()\n        \n    }\n    \n    func settingAd(){\n//        let GAD_SIMULATOR_ID = \"0b0df889514cace63baf0d3f248e5295\"\n        let MY_BANNER_UNIT_ID = \"ca-app-pub-9360978553412745/7543765112\"\n        var origin:CGPoint?\n        if self.navigationController == nil {\n            origin = CGPointMake(\n                0.0,\n                screenHeight! - CGSizeFromGADAdSize(kGADAdSizeBanner).height - 35); // place at bottom of view\n        }else{\n            origin = CGPointMake(\n                0.0,\n                screenHeight! - CGSizeFromGADAdSize(kGADAdSizeBanner).height); // place at bottom of view\n        }\n        \n        let size = GADAdSizeFullWidthPortraitWithHeight(50) // set size to 50\n        let adB = GADBannerView(adSize: size, origin: origin!) // create the banner\n        adB.adUnitID = MY_BANNER_UNIT_ID  //\"ca-app-pub-XXXXXXXX/XXXXXXX\"\n        adB.delegate = self // ??\n        adB.rootViewController = self // ??\n        self.view.addSubview(adB) // ??\n        let request = GADRequest() // create request\n        //        request.testDevices = [GAD_SIMULATOR_ID]; // set it to \"test\" request\n//        request.testDevices = [kGADSimulatorID]; // set it to \"test\" request\n        adB.loadRequest(request) // actually load it (?)\n    }\n    \n    func setScreenHeight() -> CGFloat{\n        let statusBarHeight = UIApplication.sharedApplication().statusBarFrame.size.height\n        \n        if self.navigationController == nil {\n            print(\"いきなりwebView\")\n            navigationBarHeight = parentNavigationController?.navigationBar.frame.size.height\n        \n            isViaTableView = false\n        }else{\n            print(\"table view からのwebView\")\n            navigationBarHeight = self.navigationController?.navigationBar.frame.size.height\n            isViaTableView = true\n        }\n        \n//        self.settingAd(offsetY: statusBarHeight + navigationBarHeight!)\n        print(statusBarHeight + navigationBarHeight!)\n        return self.view.bounds.height - statusBarHeight - navigationBarHeight!\n    }\n    \n    func initMenuViewAndButton(){\n        let btnSize : CGFloat = 50\n        let btnFontSize : CGFloat = 50.0\n        let menuLeftMargin : CGFloat = 5.0\n        let btnLeftMargin : CGFloat = 40.0\n        let goForwardBtnPosX = menuLeftMargin + btnFontSize + btnLeftMargin\n        \n        let menuViewWidth : CGFloat = 150\n        let menuViewHeight: CGFloat = 60.0\n        let menuBottomMargin: CGFloat = 10.0\n        let menuViewPosX : CGFloat = (screenWidth! - menuViewWidth) / 2\n        var menuViewPosY : CGFloat?\n        \n        if isViaTableView {\n            menuViewPosY = screenHeight! - menuViewHeight - menuBottomMargin\n        }else{\n            menuViewPosY = screenHeight! - menuViewHeight * 1.5 - menuBottomMargin\n        }\n        \n        menuView = UIView(frame: CGRectMake(menuViewPosX, menuViewPosY!, menuViewWidth, menuViewHeight))\n        menuView.backgroundColor = UIColor.webViewMenuBackgroundColor()\n        menuView.layer.cornerRadius = 10.0\n        menuView.tag = 10\n        \n        goBackBtn = UIButton(frame: CGRectMake(menuLeftMargin, menuViewHeight / 2 - btnFontSize / 2, btnSize, btnSize))\n        goBackBtn.setTitle(\"<\", forState: UIControlState.Normal)\n        goBackBtn.setTitleColor(UIColor.webViewMenuBtnEnabledColor(), forState: UIControlState.Normal)\n        goBackBtn.titleLabel!.font = UIFont(name: \"Helvetica-Bold\",size: btnFontSize)\n        goBackBtn.addTarget(self, action: \"menuBtnTapped:\", forControlEvents: UIControlEvents.TouchUpInside)\n        goBackBtn.tag = 1\n        \n        goForwardBtn = UIButton(frame: CGRectMake(goForwardBtnPosX, menuViewHeight / 2 - btnFontSize / 2, btnSize, btnSize))\n        goForwardBtn.setTitle(\">\", forState: UIControlState.Normal)\n        goForwardBtn.setTitleColor(UIColor.webViewMenuBtnDisabledColor(), forState: UIControlState.Normal)\n        goForwardBtn.titleLabel!.font = UIFont(name: \"Helvetica-Bold\",size: btnFontSize)\n        goForwardBtn.addTarget(self, action: \"menuBtnTapped:\", forControlEvents: UIControlEvents.TouchUpInside)\n        goForwardBtn.tag = 2\n        \n        menuView.addSubview(goBackBtn)\n        menuView.addSubview(goForwardBtn)\n    }\n    \n    \n    func initProgressBar(){\n        progressBar = UIProgressView(frame: CGRectMake(0, 0, screenWidth!, progressBarHeight))\n        progressBar!.progressTintColor = UIColor.progressTintColor()\n        progressBar!.trackTintColor = UIColor.whiteColor()\n        progressBar!.setProgress(1.0, animated: true)\n        progressBar!.transform = CGAffineTransformMakeScale(1.0, 2.0)\n        self.view.addSubview(progressBar!)\n    }\n    \n    func initWebView(){\n        if pageTitle == \"結果\" || pageTitle == \"動画\" || pageTitle == \"ニュース\"{\n            print(\"js execute\")\n            let contentController = WKUserContentController();\n            if let path = NSBundle.mainBundle().pathForResource(\"script\", ofType: \"js\") {\n                if let source = try? NSString(contentsOfFile: path, encoding: NSUTF8StringEncoding) {\n                    let userScript = WKUserScript(source: source as String, injectionTime: WKUserScriptInjectionTime.AtDocumentEnd, forMainFrameOnly: true)\n                    contentController.addUserScript(userScript)\n//                    contentController.addScriptMessageHandler(\n//                        self,\n//                        name: \"callbackHandler\"\n//                    )\n                }\n            }\n\n            let config = WKWebViewConfiguration()\n            config.userContentController = contentController\n            wkWebView = WKWebView(frame: CGRectMake(0, 0, screenWidth!, screenHeight!), configuration: config)\n            \n        }else {\n            wkWebView = WKWebView(frame: CGRectMake(0, 0, screenWidth!, screenHeight!))\n        }\n        \n        wkWebView?.allowsBackForwardNavigationGestures = true\n        \n        //監視対象の登録\n        wkWebView?.addObserver(self, forKeyPath:\"estimatedProgress\", options:.New, context:nil)\n        \n        wkWebView?.addObserver(self, forKeyPath:\"canGoBack\", options: .New, context: nil)\n        wkWebView?.addObserver(self, forKeyPath:\"canGoForward\", options: .New, context: nil)\n        \n        if isViaTableView {\n            wkWebView?.addObserver(self, forKeyPath:\"title\", options:.New, context:nil)\n        }\n        wkWebView?.UIDelegate = self\n        \n        \n        print(pageUrl!)\n        \n        if let pageUrlNotOptional = pageUrl {\n            print(\"not optional\")\n            let detailUrl = NSURL(string: pageUrlNotOptional)\n            let detailUrlReq = NSURLRequest(URL: detailUrl!)\n            wkWebView?.loadRequest(detailUrlReq)\n        }\n        \n        \n        self.view.addSubview(wkWebView!)\n    }\n    \n    func initBackButton() {\n        let backButton = UIBarButtonItem(title: \"<\", style: UIBarButtonItemStyle.Plain, target: self, action: \"back\")\n        backButton.width = screenWidth! - 100\n        backButton.tintColor = UIColor.whiteColor()\n        self.navigationItem.leftBarButtonItem = backButton\n        self.navigationItem.leftBarButtonItem?.setTitleTextAttributes([NSFontAttributeName: UIFont(name: \"HiraKakuProN-W6\", size: 12)!], forState: UIControlState.Normal)\n    }\n    \n    func setShareButton(){\n        let shareButton = UIBarButtonItem(title: \"share\", style: UIBarButtonItemStyle.Plain, target: self, action: \"shareAlert\")\n        shareButton.width = screenWidth! - 100\n        shareButton.tintColor = UIColor.whiteColor()\n        self.navigationItem.rightBarButtonItem = shareButton\n    }\n    \n    func back() {\n        navigationController?.popViewControllerAnimated(true)\n    }\n    \n    func shareAlert(){\n        let actionSheet:UIAlertController = UIAlertController(\n            title:\"この記事をシェア\",\n            message: self.navigationItem.title,\n            preferredStyle: UIAlertControllerStyle.ActionSheet)\n        \n        let cancelAction = UIAlertAction(title: \"キャンセル\", style: .Cancel) { (action) -> Void in\n        }\n        \n        let twitter = UIAlertAction(title: \"Twitter\", style: .Default) { (action) -> Void in\n            self.tweetBtnAction()\n        }\n        \n        let fb = UIAlertAction(title: \"Facebook\", style: .Default) { (action) -> Void in\n            self.fbBtnAction()\n        }\n        \n        let line = UIAlertAction(title: \"LINE\", style: .Default) { (action) -> Void in\n            self.lineBtnAction()\n        }\n        \n        let report = UIAlertAction(title: \"記事の問題を報告\", style: .Default) { (action) -> Void in\n            self.reportAlert()\n        }\n        \n        actionSheet.addAction(cancelAction)\n        actionSheet.addAction(twitter)\n        actionSheet.addAction(fb)\n        actionSheet.addAction(line)\n        actionSheet.addAction(report)\n        \n        presentViewController(actionSheet, animated: true, completion: nil)\n    }\n    \n    func fbBtnAction(){\n        let vc:SLComposeViewController = SLComposeViewController(forServiceType: SLServiceTypeFacebook)\n        let shareText:String = self.navigationItem.title! + \" \" + self.pageUrl!\n        //テキストを設定\n        vc.setInitialText(shareText)\n        self.presentViewController(vc,animated:true,completion:nil)\n    }\n    \n    func tweetBtnAction(){\n        let vc:SLComposeViewController = SLComposeViewController(forServiceType: SLServiceTypeTwitter)\n        let shareText:String = self.navigationItem.title! + \" \" + self.pageUrl!\n        //テキストを設定\n        vc.setInitialText(shareText)\n        self.presentViewController(vc,animated:true,completion:nil)\n    }\n    \n    func lineBtnAction(){\n        let shareText:String = self.navigationItem.title! + \" \" + self.pageUrl!\n        let encodeMessage: String! = shareText.stringByAddingPercentEncodingWithAllowedCharacters(NSCharacterSet.URLQueryAllowedCharacterSet())\n        let messageURL: NSURL! = NSURL( string: \"line://msg/text/\" + encodeMessage )\n        \n        if (UIApplication.sharedApplication().canOpenURL(messageURL)) {\n            UIApplication.sharedApplication().openURL( messageURL )\n        }\n    }\n    \n    func reportAlert(){\n        let ac = UIAlertController(title: self.navigationItem.title, message: \"この記事を報告しますか\", preferredStyle: .Alert)\n        \n        let cancelAction = UIAlertAction(title: \"キャンセル\", style: .Cancel) { (action) -> Void in\n            print(\"Cancel button tapped.\")\n        }\n        \n        let okAction = UIAlertAction(title: \"はい\", style: .Default) { (action) -> Void in\n            self.reportResultAlert()\n        }\n        \n        ac.addAction(cancelAction)\n        ac.addAction(okAction)\n        \n        presentViewController(ac, animated: true, completion: nil)\n        \n    }\n    \n    func reportResultAlert(){\n//        var ac = UIAlertController(title: \"報告をしました\", message: \"\", preferredStyle: .Alert)\n//        \n//        let okAction = UIAlertAction(title: \"閉じる\", style: .Default) { (action) -> Void in\n//        }\n//        \n//        ac.addAction(okAction)\n//        \n//        presentViewController(ac, animated: true, completion: nil)\n        let body = \"不快なコンテンツを含む記事を通報します。\\n\\n\" + self.pageTitle! + \"\\n\\n\" + self.pageUrl!\n        \n        let picker = MFMailComposeViewController()\n        picker.mailComposeDelegate = self\n        picker.setToRecipients([\"naoyashiga0@gmail.com\"])\n        picker.setSubject(\"問題のある記事の報告\")\n        picker.setMessageBody(body, isHTML: true)\n        presentViewController(picker, animated: true, completion: nil)\n    }\n    \n    // ボタンを押したときの処理\n    func menuBtnTapped(sender:UIButton){\n        if sender.isEqual(goBackBtn){\n            wkWebView?.goBack()\n        }else if sender.isEqual(goForwardBtn){\n            wkWebView?.goForward()\n        }\n    }\n    \n    func changeBtnStatus(btn:UIButton){\n        if btn.enabled {\n            btn.setTitleColor(UIColor.webViewMenuBtnEnabledColor(), forState: UIControlState.Normal)\n        }else{\n            btn.setTitleColor(UIColor.webViewMenuBtnDisabledColor(), forState: UIControlState.Normal)\n        }\n    }\n    \n    func fadeAnimation(duration:CFTimeInterval,fromValue:CGFloat,toValue:CGFloat,view:UIView?){\n        let fadeAnimation:CABasicAnimation = CABasicAnimation(keyPath: \"opacity\")\n        fadeAnimation.duration = duration\n        fadeAnimation.fromValue = fromValue\n        fadeAnimation.toValue = toValue\n        fadeAnimation.removedOnCompletion = false\n        fadeAnimation.fillMode = kCAFillModeForwards\n        view?.layer.addAnimation(fadeAnimation, forKey: nil)\n    }\n    \n    \n    override func didReceiveMemoryWarning() {\n        super.didReceiveMemoryWarning()\n        // Dispose of any resources that can be recreated.\n    }\n    \n    \n    func webView(webView: WKWebView, createWebViewWithConfiguration configuration: WKWebViewConfiguration, forNavigationAction navigationAction: WKNavigationAction, windowFeatures: WKWindowFeatures) -> WKWebView? {\n        //別タブを開くリンク対策 再度ページの読み込みをする\n        if(navigationAction.targetFrame == nil){\n            webView.loadRequest(navigationAction.request)\n        }\n        return nil\n    }\n    \n    func webView(webView: WKWebView, didCommitNavigation navigation: WKNavigation!) {\n    }\n    \n    deinit {\n        wkWebView?.removeObserver(self, forKeyPath: \"estimatedProgress\")\n        wkWebView?.removeObserver(self, forKeyPath: \"canGoForward\")\n        wkWebView?.removeObserver(self, forKeyPath: \"canGoBack\")\n        \n        if isViaTableView{\n            wkWebView?.removeObserver(self, forKeyPath: \"title\")\n        }\n    }\n    \n    override func observeValueForKeyPath(keyPath:String?, ofObject object:AnyObject?, change:[String:AnyObject]?, context:UnsafeMutablePointer<Void>) {\n        switch keyPath {\n        case \"estimatedProgress\":\n            if let progress = change[NSKeyValueChangeNewKey] as? Float {\n//                println(\"Progress:\\(progress)\")\n                if progress == 1 {\n                    fadeAnimation(0.3, fromValue: 1, toValue: 0, view: progressBar)\n                }\n            }\n        case \"title\":\n            if let title = change[NSKeyValueChangeNewKey] as? NSString {\n                if isViaTableView {\n                    //tableView経由のときはタイトルを表示\n                    self.navigationItem.title = title as String\n                }\n            }\n        case \"canGoForward\":\n            print(\"canGoForward\")\n            print(wkWebView?.canGoForward)\n            \n            var _menuView = self.view.viewWithTag(10)\n            var _forwardBtn = _menuView?.viewWithTag(2) as! UIButton\n            _forwardBtn.enabled = wkWebView!.canGoForward as Bool\n            changeBtnStatus(_forwardBtn)\n            \n        case \"canGoBack\":\n            print(\"canGoBack\")\n            print(wkWebView?.canGoBack)\n            if wkWebView!.canGoBack as Bool {\n                if let _menuView = self.view.viewWithTag(10) {\n                    //menuViewを追加済み\n                    fadeAnimation(0.4, fromValue: 0, toValue: 1, view: self.view.viewWithTag(10))\n                    \n                }else{\n                    var _forwardBtn = UIButton()\n                    _forwardBtn = menuView.viewWithTag(2) as! UIButton\n                    _forwardBtn.enabled = false\n                    changeBtnStatus(_forwardBtn)\n                    self.view.addSubview(menuView)\n                }\n            }else{\n                fadeAnimation(0.4, fromValue: 1.0, toValue: 0, view: self.view.viewWithTag(10))\n            }\n        default:\n            break\n        }\n    }\n    \n    func mailComposeController(controller: MFMailComposeViewController, didFinishWithResult result: MFMailComposeResult, error: NSError?",
 }
]
