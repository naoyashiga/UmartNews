[
 {
  "file": "/Users/naoyashiga/Desktop/code/iOS/myProduct/BlogReader/BlogReader/ArticleViewController.swift",
  "offset": 884,
  "remove": 4922,
  "text": "let refreshControl = UIRefreshControl()\n        refreshControl.addTarget(self, action: Selector(\"refreshInvoked\"), forControlEvents: UIControlEvents.ValueChanged)\n        self.refreshControl = refreshControl\n        \n        reload()\n    }\n    \n    func checkFeedSite(siteNameArray:NSArray) -> String{\n        var param = \"?\"\n        var cnt = 1\n        //配信設定\n        let ud = NSUserDefaults.standardUserDefaults()\n        \n        for siteNameStr in siteNameArray {\n            param = param + \"key\" + String(cnt) + \"=\"\n            if ud.boolForKey(siteNameStr as! String) {\n                param = param + \"1\"\n            }else{\n                //配信停止\n                param = param + \"0\"\n            }\n            \n            if cnt < siteNameArray.count {\n                param = param + \"&\"\n            }\n            cnt++\n        }\n        \n        return param\n    }\n    \n    func reload() {\n        let URL = NSURL(string: feedURL)\n        let Req = NSURLRequest(URL: URL!)\n        let connection: NSURLConnection = NSURLConnection(request: Req, delegate: self, startImmediately: false)!\n        \n        NSURLConnection.sendAsynchronousRequest(Req,\n            queue: NSOperationQueue.mainQueue(),\n            completionHandler: self.fetchResponse)\n    }\n    \n    func fetchResponse(res: NSURLResponse!, data: NSData!, error: NSError!) {\n        let json: NSArray = (try! NSJSONSerialization.JSONObjectWithData(data, options: NSJSONReadingOptions.AllowFragments))as! NSArray\n        \n//        myEntries = [String]()\n        myEntries = NSMutableArray()\n        var tmpEntry = Entry()\n        \n        \n        for j in json {\n            tmpEntry.title = j[\"title\"] as! String\n            tmpEntry.source = j[\"source\"] as! String\n            tmpEntry.link = j[\"link\"] as! String\n            tmpEntry.date = j[\"pubDate\"] as! String\n            \n            \n            myEntries.addObject(tmpEntry)\n            //初期化\n            tmpEntry = Entry()\n        }\n        \n        dispatch_async(dispatch_get_main_queue(), {\n            self.tableView.reloadData()\n        })\n    }\n    \n//    func loadRss(){\n//        let url:NSURL = NSURL(string: feedURL)!\n//        var myParser:JsonParserManager = JsonParserManager.alloc().initWithURL() as JsonParserManager\n//        myParser.startParse(url){\n//            () in\n//            var q_main : dispatch_queue_t = dispatch_get_main_queue()\n//            \n//            dispatch_async(q_main, {() in\n//                self.myEntries = myParser.entries\n////                self.tableView.reloadData()\n//            })\n//        }\n//        \n////        myParser.startParse(url){\n////            () in\n////            self.myEntries = myParser.entries\n////            self.tableView.reloadData()\n////        }\n//    }\n    \n    func refreshInvoked() {\n        print(\"start refresh\")\n        \n        //配信設定を考慮して再読み込み\n        if(self.title == \"まとめ\"){\n            feedURL = URL.MATOME.rawValue + checkFeedSite(myMatomes)\n        }else if(self.title == \"予想\"){\n            feedURL = URL.PREDICT.rawValue + checkFeedSite(myPredicts)\n        }\n        print(feedURL)\n        \n        reload()\n        self.refreshControl?.endRefreshing()\n        print(\"end refresh\")\n    }\n    \n    override func didReceiveMemoryWarning() {\n        super.didReceiveMemoryWarning()\n    }\n    \n    override func numberOfSectionsInTableView(tableView: UITableView) -> Int {\n        return 1\n    }\n    \n    override func tableView(tableView: UITableView, numberOfRowsInSection section: Int) -> Int {\n        return myEntries.count\n    }\n    \n    override func tableView(tableView: UITableView, cellForRowAtIndexPath indexPath: NSIndexPath) -> UITableViewCell {\n        let cell: Cell = tableView.dequeueReusableCellWithIdentifier(\"Cell\", forIndexPath: indexPath) as! Cell\n        let entry : Entry = myEntries[indexPath.row] as! Entry\n        \n        //行間を調整\n        let attributedText = NSMutableAttributedString(string: entry.title)\n        let paragraphStyle = NSMutableParagraphStyle()\n        paragraphStyle.lineHeightMultiple = 1.3\n        attributedText.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSMakeRange(0, attributedText.length))\n        \n//        cell.titleLabel.text = entry.title\n        cell.titleLabel.attributedText = attributedText\n        cell.titleLabel.sizeToFit()\n        \n        cell.dateLabel.text = entry.date\n        cell.siteLabel.text = entry.source\n        \n        //        println(\"***********\")\n        //        println(entry)\n        //        println(entry.title)\n        //        println(entry.source)\n        //        println(entry.date)\n        \n        return cell\n    }\n    \n    override func tableView(tableView: UITableView, didSelectRowAtIndexPath indexPath: NSIndexPath) {\n        let webVC = WebViewController()\n        \n        let",
 }
]
